<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="214" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="197.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="197.00"> </text><svg id="frames" x="10" width="1180"><g><title>pseudo_random_one_reinsert (one_reinsert.py:23) (2,182 samples, 2.14%)</title><rect x="1.9321%" y="132" width="2.1367%" height="15" fill="rgb(227,0,7)"/><text x="2.1821%" y="142.50">p..</text></g><g><title>f (cost_calculation.py:61) (2,179 samples, 2.13%)</title><rect x="1.9350%" y="148" width="2.1338%" height="15" fill="rgb(217,0,24)"/><text x="2.1850%" y="158.50">f..</text></g><g><title>total_cost_calc (cost_calculation.py:19) (1,261 samples, 1.23%)</title><rect x="5.3526%" y="164" width="1.2348%" height="15" fill="rgb(221,193,54)"/><text x="5.6026%" y="174.50"></text></g><g><title>f (cost_calculation.py:61) (5,889 samples, 5.77%)</title><rect x="5.2057%" y="148" width="5.7668%" height="15" fill="rgb(248,212,6)"/><text x="5.4557%" y="158.50">f (cost..</text></g><g><title>pseudo_random_three_exchange (three_exchange.py:22) (5,895 samples, 5.77%)</title><rect x="5.2008%" y="132" width="5.7727%" height="15" fill="rgb(208,68,35)"/><text x="5.4508%" y="142.50">pseudo_..</text></g><g><title>total_cost_calc (cost_calculation.py:19) (2,723 samples, 2.67%)</title><rect x="11.3358%" y="164" width="2.6665%" height="15" fill="rgb(232,128,0)"/><text x="11.5858%" y="174.50">to..</text></g><g><title>total_cost_calc (cost_calculation.py:29) (1,271 samples, 1.24%)</title><rect x="15.3938%" y="164" width="1.2446%" height="15" fill="rgb(207,160,47)"/><text x="15.6438%" y="174.50"></text></g><g><title>total_cost_calc (cost_calculation.py:41) (1,917 samples, 1.88%)</title><rect x="19.0973%" y="164" width="1.8772%" height="15" fill="rgb(228,23,34)"/><text x="19.3473%" y="174.50">t..</text></g><g><title>f (cost_calculation.py:61) (12,134 samples, 11.88%)</title><rect x="10.9891%" y="148" width="11.8822%" height="15" fill="rgb(218,30,26)"/><text x="11.2391%" y="158.50">f (cost_calculatio..</text></g><g><title>total_cost_calc (cost_calculation.py:9) (1,193 samples, 1.17%)</title><rect x="21.7031%" y="164" width="1.1682%" height="15" fill="rgb(220,122,19)"/><text x="21.9531%" y="174.50"></text></g><g><title>pseudo_random_two_exchange (two_exchange.py:10) (12,151 samples, 11.90%)</title><rect x="10.9745%" y="132" width="11.8989%" height="15" fill="rgb(250,228,42)"/><text x="11.2245%" y="142.50">pseudo_random_two_..</text></g><g><title>two_exchange (basic_operators.py:30) (1,251 samples, 1.23%)</title><rect x="23.7135%" y="148" width="1.2250%" height="15" fill="rgb(240,193,28)"/><text x="23.9635%" y="158.50"></text></g><g><title>pseudo_random_two_exchange (two_exchange.py:9) (1,720 samples, 1.68%)</title><rect x="23.6665%" y="132" width="1.6843%" height="15" fill="rgb(216,20,37)"/><text x="23.9165%" y="142.50"></text></g><g><title>get_routes_as_list_w_zeroes (route_handler.py:116) (1,240 samples, 1.21%)</title><rect x="27.1898%" y="148" width="1.2143%" height="15" fill="rgb(206,188,39)"/><text x="27.4398%" y="158.50"></text></g><g><title>take_from_dummy_place_first_suitable (own_basic_ops.py:22) (2,509 samples, 2.46%)</title><rect x="25.9599%" y="132" width="2.4569%" height="15" fill="rgb(217,207,13)"/><text x="26.2099%" y="142.50">ta..</text></g><g><title>operator (alns.py:188) (30,612 samples, 29.98%)</title><rect x="0.1645%" y="116" width="29.9768%" height="15" fill="rgb(231,73,38)"/><text x="0.4145%" y="126.50">operator (alns.py:188)</text></g><g><title>calls_to_nodes (route_handler.py:8) (1,618 samples, 1.58%)</title><rect x="34.6175%" y="164" width="1.5844%" height="15" fill="rgb(225,20,46)"/><text x="34.8675%" y="174.50"></text></g><g><title>total_cost_calc (cost_calculation.py:19) (6,621 samples, 6.48%)</title><rect x="31.1548%" y="148" width="6.4836%" height="15" fill="rgb(210,31,41)"/><text x="31.4048%" y="158.50">total_co..</text></g><g><title>calls_to_nodes (route_handler.py:9) (1,467 samples, 1.44%)</title><rect x="36.2019%" y="164" width="1.4366%" height="15" fill="rgb(221,200,47)"/><text x="36.4519%" y="174.50"></text></g><g><title>total_cost_calc (cost_calculation.py:22) (1,270 samples, 1.24%)</title><rect x="38.0889%" y="148" width="1.2436%" height="15" fill="rgb(226,26,5)"/><text x="38.3389%" y="158.50"></text></g><g><title>total_cost_calc (cost_calculation.py:29) (3,160 samples, 3.09%)</title><rect x="41.0874%" y="148" width="3.0944%" height="15" fill="rgb(249,33,26)"/><text x="41.3374%" y="158.50">tot..</text></g><g><title>total_cost_calc (cost_calculation.py:35) (1,782 samples, 1.75%)</title><rect x="46.2813%" y="148" width="1.7450%" height="15" fill="rgb(235,183,28)"/><text x="46.5313%" y="158.50"></text></g><g><title>total_cost_calc (cost_calculation.py:38) (1,357 samples, 1.33%)</title><rect x="48.6854%" y="148" width="1.3288%" height="15" fill="rgb(221,5,38)"/><text x="48.9354%" y="158.50"></text></g><g><title>total_cost_calc (cost_calculation.py:41) (5,155 samples, 5.05%)</title><rect x="50.6047%" y="148" width="5.0480%" height="15" fill="rgb(247,18,42)"/><text x="50.8547%" y="158.50">total_..</text></g><g><title>get_routes_as_list (route_handler.py:103) (1,475 samples, 1.44%)</title><rect x="57.7503%" y="164" width="1.4444%" height="15" fill="rgb(241,131,45)"/><text x="58.0003%" y="174.50"></text></g><g><title>f (cost_calculation.py:61) (30,766 samples, 30.13%)</title><rect x="30.1687%" y="132" width="30.1276%" height="15" fill="rgb(249,31,29)"/><text x="30.4187%" y="142.50">f (cost_calculation.py:61)</text></g><g><title>total_cost_calc (cost_calculation.py:9) (2,841 samples, 2.78%)</title><rect x="57.5143%" y="148" width="2.7820%" height="15" fill="rgb(225,111,53)"/><text x="57.7643%" y="158.50">to..</text></g><g><title>operator (alns.py:189) (30,798 samples, 30.16%)</title><rect x="30.1413%" y="116" width="30.1589%" height="15" fill="rgb(238,160,17)"/><text x="30.3913%" y="126.50">operator (alns.py:189)</text></g><g><title>adaptive_large_neighborhood_search (alns.py:126) (61,926 samples, 60.64%)</title><rect x="0.0764%" y="100" width="60.6410%" height="15" fill="rgb(214,148,48)"/><text x="0.3264%" y="110.50">adaptive_large_neighborhood_search (alns.py:126)</text></g><g><title>check_solution (feasibility_check.py:20) (4,446 samples, 4.35%)</title><rect x="61.4323%" y="116" width="4.3537%" height="15" fill="rgb(232,36,49)"/><text x="61.6823%" y="126.50">check..</text></g><g><title>__init__ (collections/__init__.py:568) (2,554 samples, 2.50%)</title><rect x="63.2850%" y="132" width="2.5010%" height="15" fill="rgb(209,103,24)"/><text x="63.5350%" y="142.50">__..</text></g><g><title>check_solution (feasibility_check.py:40) (3,826 samples, 3.75%)</title><rect x="67.8454%" y="116" width="3.7466%" height="15" fill="rgb(229,88,8)"/><text x="68.0954%" y="126.50">chec..</text></g><g><title>check_solution (feasibility_check.py:58) (4,613 samples, 4.52%)</title><rect x="74.1517%" y="116" width="4.5173%" height="15" fill="rgb(213,181,19)"/><text x="74.4017%" y="126.50">check..</text></g><g><title>adaptive_large_neighborhood_search (alns.py:133) (18,145 samples, 17.77%)</title><rect x="60.9260%" y="100" width="17.7685%" height="15" fill="rgb(254,191,54)"/><text x="61.1760%" y="110.50">adaptive_large_neighborhood_..</text></g><g><title>check_solution (feasibility_check.py:20) (4,170 samples, 4.08%)</title><rect x="79.2673%" y="116" width="4.0835%" height="15" fill="rgb(241,83,37)"/><text x="79.5173%" y="126.50">chec..</text></g><g><title>__init__ (collections/__init__.py:568) (2,382 samples, 2.33%)</title><rect x="81.0182%" y="132" width="2.3326%" height="15" fill="rgb(233,36,39)"/><text x="81.2682%" y="142.50">_..</text></g><g><title>check_solution (feasibility_check.py:40) (3,951 samples, 3.87%)</title><rect x="85.2319%" y="116" width="3.8690%" height="15" fill="rgb(226,3,54)"/><text x="85.4819%" y="126.50">chec..</text></g><g><title>check_solution (feasibility_check.py:58) (4,520 samples, 4.43%)</title><rect x="91.7488%" y="116" width="4.4262%" height="15" fill="rgb(245,192,40)"/><text x="91.9988%" y="126.50">check..</text></g><g><title>adaptive_large_neighborhood_search (alns.py:140) (17,798 samples, 17.43%)</title><rect x="78.7846%" y="100" width="17.4287%" height="15" fill="rgb(238,167,29)"/><text x="79.0346%" y="110.50">adaptive_large_neighborhood..</text></g><g><title>get_routes_as_list_w_zeroes (route_handler.py:116) (1,042 samples, 1.02%)</title><rect x="97.5078%" y="132" width="1.0204%" height="15" fill="rgb(232,182,51)"/><text x="97.7578%" y="142.50"></text></g><g><title>move_to_dummy (own_basic_ops.py:107) (2,185 samples, 2.14%)</title><rect x="96.4003%" y="116" width="2.1397%" height="15" fill="rgb(231,60,39)"/><text x="96.6503%" y="126.50">m..</text></g><g><title>adaptive_large_neighborhood_search (alns.py:75) (3,021 samples, 2.96%)</title><rect x="96.3170%" y="100" width="2.9583%" height="15" fill="rgb(208,69,12)"/><text x="96.5670%" y="110.50">ada..</text></g><g><title>alns_init (alns_init.py:28) (102,082 samples, 99.96%)</title><rect x="0.0284%" y="84" width="99.9638%" height="15" fill="rgb(235,93,37)"/><text x="0.2784%" y="94.50">alns_init (alns_init.py:28)</text></g><g><title>all (102,119 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(213,116,39)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (main.py:26) (102,090 samples, 99.97%)</title><rect x="0.0284%" y="52" width="99.9716%" height="15" fill="rgb(222,207,29)"/><text x="0.2784%" y="62.50">&lt;module&gt; (main.py:26)</text></g><g><title>main (main.py:22) (102,090 samples, 99.97%)</title><rect x="0.0284%" y="68" width="99.9716%" height="15" fill="rgb(206,96,30)"/><text x="0.2784%" y="78.50">main (main.py:22)</text></g></svg></svg>